// Code generated by mockery v2.53.5. DO NOT EDIT.

package mockapi

import (
	context "context"
	model "order_service/internal/model"

	mock "github.com/stretchr/testify/mock"

	uuid "github.com/google/uuid"
)

// Service is an autogenerated mock type for the Service type
type Service struct {
	mock.Mock
}

type Service_Expecter struct {
	mock *mock.Mock
}

func (_m *Service) EXPECT() *Service_Expecter {
	return &Service_Expecter{mock: &_m.Mock}
}

// Order provides a mock function with given fields: ctx, orderID
func (_m *Service) Order(ctx context.Context, orderID uuid.UUID) (model.Order, error) {
	ret := _m.Called(ctx, orderID)

	if len(ret) == 0 {
		panic("no return value specified for Order")
	}

	var r0 model.Order
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) (model.Order, error)); ok {
		return rf(ctx, orderID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) model.Order); ok {
		r0 = rf(ctx, orderID)
	} else {
		r0 = ret.Get(0).(model.Order)
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = rf(ctx, orderID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Service_Order_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Order'
type Service_Order_Call struct {
	*mock.Call
}

// Order is a helper method to define mock.On call
//   - ctx context.Context
//   - orderID uuid.UUID
func (_e *Service_Expecter) Order(ctx interface{}, orderID interface{}) *Service_Order_Call {
	return &Service_Order_Call{Call: _e.mock.On("Order", ctx, orderID)}
}

func (_c *Service_Order_Call) Run(run func(ctx context.Context, orderID uuid.UUID)) *Service_Order_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID))
	})
	return _c
}

func (_c *Service_Order_Call) Return(_a0 model.Order, _a1 error) *Service_Order_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Service_Order_Call) RunAndReturn(run func(context.Context, uuid.UUID) (model.Order, error)) *Service_Order_Call {
	_c.Call.Return(run)
	return _c
}

// NewService creates a new instance of Service. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewService(t interface {
	mock.TestingT
	Cleanup(func())
}) *Service {
	mock := &Service{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
