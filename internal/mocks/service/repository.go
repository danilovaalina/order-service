// Code generated by mockery v2.53.5. DO NOT EDIT.

package mockservice

import (
	context "context"
	model "order_service/internal/model"

	mock "github.com/stretchr/testify/mock"
)

// Repository is an autogenerated mock type for the Repository type
type Repository struct {
	mock.Mock
}

type Repository_Expecter struct {
	mock *mock.Mock
}

func (_m *Repository) EXPECT() *Repository_Expecter {
	return &Repository_Expecter{mock: &_m.Mock}
}

// CreateOrder provides a mock function with given fields: ctx, order
func (_m *Repository) CreateOrder(ctx context.Context, order model.Order) (model.Order, error) {
	ret := _m.Called(ctx, order)

	if len(ret) == 0 {
		panic("no return value specified for CreateOrder")
	}

	var r0 model.Order
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, model.Order) (model.Order, error)); ok {
		return rf(ctx, order)
	}
	if rf, ok := ret.Get(0).(func(context.Context, model.Order) model.Order); ok {
		r0 = rf(ctx, order)
	} else {
		r0 = ret.Get(0).(model.Order)
	}

	if rf, ok := ret.Get(1).(func(context.Context, model.Order) error); ok {
		r1 = rf(ctx, order)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Repository_CreateOrder_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateOrder'
type Repository_CreateOrder_Call struct {
	*mock.Call
}

// CreateOrder is a helper method to define mock.On call
//   - ctx context.Context
//   - order model.Order
func (_e *Repository_Expecter) CreateOrder(ctx interface{}, order interface{}) *Repository_CreateOrder_Call {
	return &Repository_CreateOrder_Call{Call: _e.mock.On("CreateOrder", ctx, order)}
}

func (_c *Repository_CreateOrder_Call) Run(run func(ctx context.Context, order model.Order)) *Repository_CreateOrder_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(model.Order))
	})
	return _c
}

func (_c *Repository_CreateOrder_Call) Return(_a0 model.Order, _a1 error) *Repository_CreateOrder_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Repository_CreateOrder_Call) RunAndReturn(run func(context.Context, model.Order) (model.Order, error)) *Repository_CreateOrder_Call {
	_c.Call.Return(run)
	return _c
}

// Orders provides a mock function with given fields: ctx, opts
func (_m *Repository) Orders(ctx context.Context, opts model.OrderFilter) ([]model.Order, error) {
	ret := _m.Called(ctx, opts)

	if len(ret) == 0 {
		panic("no return value specified for Orders")
	}

	var r0 []model.Order
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, model.OrderFilter) ([]model.Order, error)); ok {
		return rf(ctx, opts)
	}
	if rf, ok := ret.Get(0).(func(context.Context, model.OrderFilter) []model.Order); ok {
		r0 = rf(ctx, opts)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]model.Order)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, model.OrderFilter) error); ok {
		r1 = rf(ctx, opts)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Repository_Orders_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Orders'
type Repository_Orders_Call struct {
	*mock.Call
}

// Orders is a helper method to define mock.On call
//   - ctx context.Context
//   - opts model.OrderFilter
func (_e *Repository_Expecter) Orders(ctx interface{}, opts interface{}) *Repository_Orders_Call {
	return &Repository_Orders_Call{Call: _e.mock.On("Orders", ctx, opts)}
}

func (_c *Repository_Orders_Call) Run(run func(ctx context.Context, opts model.OrderFilter)) *Repository_Orders_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(model.OrderFilter))
	})
	return _c
}

func (_c *Repository_Orders_Call) Return(_a0 []model.Order, _a1 error) *Repository_Orders_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Repository_Orders_Call) RunAndReturn(run func(context.Context, model.OrderFilter) ([]model.Order, error)) *Repository_Orders_Call {
	_c.Call.Return(run)
	return _c
}

// NewRepository creates a new instance of Repository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *Repository {
	mock := &Repository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
